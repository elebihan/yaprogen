#
# {{project_name}} - {{description}}
#
# {{copyright_notice}}
#
{{#license_notice}}
# {{line}}
{{/license_notice}}
#

project('{{project_name}}', 'cpp',
        version : '0.1.1',
        license : '{{license}}',
        meson_version : '>= 0.50')

prefixdir = get_option('prefix')
libdir = join_paths(prefixdir, get_option('libdir'))

llvm_dep = dependency('llvm', version: '>= 3.5')
clang_include = llvm_dep.get_configtool_variable('includedir')
clang_libdir = llvm_dep.get_configtool_variable('libdir').split(' ')

ccpp = meson.get_compiler('cpp')

if not ccpp.has_header('clang/StaticAnalyzer/Core/Checker.h',
                       args: '-I' + clang_include)
       error('clang: Failed to find static analyzer headers')
endif

clang_dep = declare_dependency(
  dependencies: ccpp.find_library('libclang', dirs: clang_libdir),
  include_directories: include_directories(clang_include),
)

subdir('{{project_normalized}}')

status = [
  '@0@ @1@'.format(meson.project_name(), meson.project_version()),

  'prefix:         @0@'.format(prefixdir),
  'libdir:         @0@'.format(libdir),
]

message('\n         '.join(status))
