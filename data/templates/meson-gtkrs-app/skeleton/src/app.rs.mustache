//
// This file is part of {{project_name}}
//
// {{copyright_notice}}
//
{{#license_notice}}
// {{line}}
{{/license_notice}}
//

use gio::{self, prelude::*};
use gtk::{self, prelude::*};
use std::cell::RefCell;
use std::error;
use std::ops;
use std::rc::{Rc, Weak};

use crate::header_bar;
use crate::actions;

#[derive(Clone)]
pub struct App(Rc<AppInner>);

impl ops::Deref for App {
    type Target = AppInner;

    fn deref(&self) -> &AppInner {
        &*self.0
    }
}

pub struct AppWeak(Weak<AppInner>);

impl AppWeak {
    pub fn upgrade(&self) -> Option<App> {
        self.0.upgrade().map(App)
    }
}

pub struct AppInner {
    window: gtk::ApplicationWindow,
    header_bar: gtk::HeaderBar,
}

impl App {
    fn new(application: &gtk::Application) -> Result<App, Box<dyn error::Error>> {
        let window = gtk::ApplicationWindow::new(application);
        window.set_title("{{project_name}}");

        let header_bar = header_bar::create(&window);

        let app = App(Rc::new(AppInner { window, header_bar }));

        actions::setup(&application);

        Ok(app)
    }

    pub fn downgrade(&self) -> AppWeak {
        AppWeak(Rc::downgrade(&self.0))
    }

    pub fn on_startup(application: &gtk::Application) {
        let app = App::new(application).expect("Failed to create application");

        let app_weak = app.downgrade();
        application.connect_activate(move |_| {
            let app = app_weak.upgrade().expect("Failed to upgrade Weak");
            app.on_activate();
        });

        let app_container = RefCell::new(Some(app));
        application.connect_shutdown(move |_| {
            let app = app_container
                .borrow_mut()
                .take()
                .expect("Shutdown called multiple times");
            app.on_shutdown();
        });
    }

    fn on_activate(&self) {
        self.window.show_all();
        // Insert activation code here
    }

    fn on_shutdown(&self) {
        // Insert shutdown code here
    }
}
